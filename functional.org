#+AUTHOR: Andrea Crotti (@andreacrotti)
#+TITLE: Functional Programming and Python
#+OPTIONS: num:nil toc:nil ^:nil tex:t reveal_progress:t reveal_control:t reveal_overview:t
#+REVEAL_TRANS: none
#+REVEAL_SPEED: fast
#+REVEAL_HLEVEL: 1
#+TOC: listings
  
* 
  :PROPERTIES:
  :reveal_background: ./images/what_if_functional.jpg
  :reveal_background_size: 800px
  :END:

* Overview

#+BEGIN_NOTES
Welcome all and thanks for coming.
Today we are going to talk about functional programming, (so if you are in the wrong room please run now).
We'll first see a bit of history, give an overview of probably the most iconic functional programming language,
and finally get to the juicy part, what we can do in Python and how.

I have a lot of material so sorry in advance if I might go a bit too fast, all the material will be available,
so just sit back and relax.

To just explain in two words who I am, I'm mainly a Python backend developer (even if now doing lots of devops work)
but have been for the last few years more and more interested in functional programming.
I did my bachelor thesis with Haskell long time ago, studied Clojure/Scala and today I just wanted
to share a bit of this knowledge to you.
I can't claim to be an expert though, I still have lots to learn, but I'm definitively enjoying the ride.
#+END_NOTES

#+ATTR_REVEAL: :frag (appear)
 
  * A bit of history
  * Why functional programming matters
  * Brief introduction to Haskell
  * Functional patterns in Python/Haskell

* History

** First there was lambda calculus

#+BEGIN_NOTES
Functional programming is a lot older than some people might think.
It was the early 1930 when Alonzo Church first introduced it, and wikipedia defines lambda calculus
as a turing complete, universal model of computation that can be used to simulate any single-taped Turing machine.
This might sound a bit cryptic if you haven't studied computer science, but we could say to greatly simplify
that imperative program can be written functionally, and viceversa.

It's based on two extremely simple concepts, function abstraction and variable binding and substitution.

Just to clarify both Turing machines and lambda calculus can't really be used directly, but they are
extremely important as foundations of what we can actually compute.
#+END_NOTES

First introduced in *1930* by Alonzo Church

#+BEGIN_QUOTE
*Turing complete, universal* model of computation that can be used to simulate any single-taped Turing machine.
#+END_QUOTE

Imperative \equiv Functional

Lambda calculus is based on:

- function abstraction
- variable binding and substitution

** Lambda calculus primer

#+BEGIN_NOTES
Here is a simple example of how lambda calculus looks like.
The first function is just the identity function, given x it retuns x.
The second is a function that takes two arguments, and always returns the first 1.
In this case /y/ is a free variable, while x is a bound by the lambda.
The last example is a function returning another function.
The syntax itself is extremely simple and what's even more interesting is that there are only two reduction
rules, alpha which can be seen as simple renaming, and beta which actually does variable substitution.

I'll show a simple example in a second, but the interesting part is how little you need to define a formalism
that is able to define all possible valid programs.
#+END_NOTES

#+ATTR_REVEAL: :frag (appear)
  - function definitions
    * $\lambda x. x$
    * $\lambda x y. x$
    * $\lambda x. \lambda y. x$

  - Reduction rules
    * \alpha reduction (renaming)
    * \beta reduction (substitution)

** Lisp

#+BEGIN_NOTES
In 1958 Lisp was invented, and at the time the other two mainstream languages were Fortran and Assembly.
This is quite impressive considering that for example C was created in the 1970s.
Lisp was greatly inspired by Lambda calculus, as we can see from these examples the syntax is basically the same.
In the higher order function example we can see a *defun* and a *lambda*, which are exactly the same as *def* and *lambda*
in Python, a named and an anonymous function.
Lambda calculus didn't have named functions for example but obviously a language that can't name things is not very practical
in the end.
So then we can see a very simple substitution (the beta reduction we were talking about), if I apply the higher-order
function to 2 and apply the result of that to 3 I get this chain of evaluation.
#+END_NOTES

Originally specified in *1958*, with Fortran and Assembly.

#+BEGIN_SRC lisp
  (defun id (x) x) ; $\lambda x. x

  (defun discard-second (x y) (x)) ; \lambda x y. x

  (defun higher-order (x) (lambda (y) x)) ; \lambda x. \lambda y. x

#+END_SRC

Sample substitution:

#+BEGIN_SRC lisp
  ((higher-order 2) 3)  ; same as higher-order(2)(3)
  ((lambda (y) 2) 3)         ; same as (lambda y: 2)(3)
  2
#+END_SRC

** Typed lambda calculus
   
#+BEGIN_NOTES
Typed lambda calculus is a generalisation of lambda calculus, still introduced by Alonzo,
and can be defined as is a typed interpretation of the lambda calculus with only one type
constructor: \rightarrow that builds function types.

In short it means that we add the capability to define types into the calculus, and it was the
foundation of other funtional languages like ML and Haskel.
The identify function is more or less the same as you can see, and in Haskell we can just
define it like this.
The double colon in Haskell defines the type, and a is just a generic type, which means
that id works for every possible type.
#+END_NOTES

Introduced in *1940* by Alonzo Church.

#+BEGIN_QUOTE
is a typed interpretation of the lambda calculus with only one type
constructor: \rightarrow that builds function types.
#+END_QUOTE

For every type \tau:
*identity* $\lambda x:\tau . x: \tau \rightarrow \tau$

Foundation to ML and Haskell (1990):
#+BEGIN_SRC haskell
  id :: a - > a
  id x = x
#+END_SRC

** Back to the present

#+BEGIN_NOTES
If we go back to 2016 the scenario we see it's really interesting, because there are languages
like Haskell that it's not just an academic toy anymore, but used also by companies like Facebook
that has millions of lines of Haskell in their hyper sophisticated anti-spam system.
Clojure and Clojurescript (a quite new lisp dialect) are also growing a lot, used by companies like
Deutsche bank/Walmart/mail online and much more.
Erlang is much older but was for example one of the causes of the success of whatsapp.
It's a functioal programming language incredibly strong on concurrency, and there are stories
that say that they were capable of handling millions of concurrent requests on a single node
using Erlang at Whatsapp.

Scala is another interesting language, and combines both OOP and FP quite nicely, having a massive
success the Java world.

Even java added lambdas to the core language...
#+END_NOTES

#+ATTR_REVEAL: :frag (appear)

 * Haskell
 * Clojure / Clojurescript
 * Erlang
 * Elixir
 * Scala (Spark)
 * Java's Lambda
 * Elm
 * (ReactJS)
 * (ImmutableJS)


* Christmas break #1
  :PROPERTIES:
  :reveal_background: ./images/cat_bed.gif
  # :reveal_background_size: 800px
  :END:

* Why

** Rip OOP

#+BEGIN_NOTES
Most people have been taught OOP and still use that as main paradigm at work.
This quote from a professor at Carniage Mellon University explains quite
well why OOP might not be the best choice in 2016 anymore.
There are many universities that are in fact using Haskell/Ocaml or other FP
languages to new students.

#+END_NOTES

 [[./images/oop_rip.jpg]]

#+begin_quote
 Object-oriented programming is both anti-modular and
 anti-parallel by its very nature, and hence unsuitable for a modern CS
 curriculum.

 Robert Harper (professor at Carniage Mellon University)

 #+end_quote

** FP advantages

- easier concurrency
- better composability
- easier to test code

** Why not everyone doing it?

#+BEGIN_NOTES
If it's all so much better why not everyone is already doing it?
Well first it is actually happening and fp concepts are spreading more and more in every area.
This graph however explains quite well for me what the problem is.
Everyone can easily understand easily imperative programming, since you just tell the computer
what to do.
OOP adds some complexity but still everyone can quickly grasp concepts what's an object is,
what inheritance mean and so and so forth.
Functions and things like Monads/Monoids and functors are a lot hard to grasp, since they come
from quite abstract mathematical concepts.
However as this very scientific graph shows the rewards are massive, and will take your
programming to the next level.
#+END_NOTES

[[./images/learning_curves_trimmed.jpg]]

#+BEGIN_QUOTE
  OOP cannot save us from the Cloud Monster anymore. - Ju Gon√ßalves
#+END_QUOTE

* What?

#+BEGIN_NOTES
Trying to define functional programming is not that easy, since as we could
see lambda calculus was just a very primitive mathematical foundation.
Many functional programming languages differ also quite significantly, but
these principles are quite general.
We are going to see very soon examples of all these concepts in both Haskell and Python.
#+END_NOTES

#+BEGIN_QUOTE

Functional Programming is so called because a program consists entirely of functions.
- John Hughes, Why Functional Programming Matters
#+END_QUOTE

#+ATTR_REVEAL: :frag (appear)
  - Functions are *first class* citizens: higher-order, partial application, currying..
  - Data is immutable
  - sequences are *lazy* by default
  - Functions are *pure*

** Haskell (1990)

 #+BEGIN_NOTES
 The original intention was to talk about Python but in reality
 my first real encounter with FP was with Haskell and that's probably
 the main reason why I got interested in it.

 Haskell is a relatively old language (same age as Python) but it has
 been for most of its history a niche research language, that people
 used to write papers with.

 It's probably until now the most "complete" and pure functional programming
 language out there, and in some ways it's just incredibly beautiful.

 This joke here refers to the fact that while there is so much interest in
 Haskell not as many people use it in production, but in any case
 it's still probably the best language to really learn functional programming.
 #+END_NOTES

   - pure
   - lazy
   - pattern matching
   - algebraic data types
   - type inference

** Haskell crash course
#+ATTR_REVEAL: :frag (appear)
 * fibonacci
   #+BEGIN_SRC haskell
     fib 0 = 1
     fib 1 = 1
     fib n = fib (n - 1) + fib (n - 2)
   #+END_SRC
  
 * Algebraic Data Types
   #+BEGIN_SRC haskell
     data ChristmasTree a = Nil
       | Leaf a
       | Branch (ChristmasTree a) (ChristmasTree a)
       deriving (Eq, Ord, Read)
   #+END_SRC

 * Infinite list even numbers
    #+BEGIN_SRC haskell
      all_evens = [x | x <- [0..], x `mod` 2 == 0]
      take 10 all_evens -- [0,2,4,6,8,10,12,14,16,18]
      drop 10 $ take 10 all_evens -- [20,22,24,26,28,30,32,34,36,38]
    #+END_SRC

* Christmas break #2
  :PROPERTIES:
  :reveal_background: ./images/cat_liying.gif
  :END:

* FP in practice

#+BEGIN_NOTES
Now that I hope we have a more clear idea about what is functional programming we are
going to see some examples of the various concepts we talked about in Python, comparing
them with the haskell equivalent.
#+END_NOTES

#+ATTR_REVEAL: :frag (appear)
  * Function composition (toolz/functools)
  * Recursion (fn.py)
  * Immutability (toolz)
  * Streaming (itertools/toolz)
  * Types (mypy/voluptuous?)

* What's a function, really

** Mathematical definition

#+BEGIN_QUOTE
A function is a relation between a set of inputs and a set of permissible outputs
with the property that each input is related to exactly one output. 
#+END_QUOTE

[[./images/f_x.gif]]

** Def and Lambda

#+ATTR_REVEAL: :frag (appear)
 * def
   #+BEGIN_SRC python
     def adder(a, b):
         return a + b

     adder(1, 2) # -> 3
   #+END_SRC

 * lambda
  #+BEGIN_SRC python
    adder_lambda = lambda a, b: a + b
    adder_lambda(1, 2) # -> 3
  #+END_SRC

 * types
   #+BEGIN_SRC python
     type(adder) == type(adder_lambda) == function # -> True
   #+END_SRC

** Class?

#+ATTR_REVEAL: :frag (appear)
  * Callable instance
   
    #+BEGIN_SRC python
      class Adder:
          def __call__(self, a, b):
              return a + b

      my_adder = Adder()
      my_adder(1, 2) # -> 3
    #+END_SRC

  * Generic callable interface
    
    #+BEGIN_SRC python
      type(adder) == function # -> False
      callable(adder)   # -> True
      callable(my_adder) # -> True
    #+END_SRC

** Other functions?

#+ATTR_REVEAL: :frag (appear)
  * Let's define a method and call it:
    #+BEGIN_SRC python
      class Santa:
          def give_gift(self, kid, gift):
              print("Good boy {}, here is your {}".format(kid, gift))
    
      my_santa = Santa()
      my_santa.give_gift('boy', 'toy') # -> Good boy boy, here is your toy
    #+END_SRC

  * What is actually give_gift?
    #+BEGIN_SRC python
      type(Santa.give_gift) # -> function
    #+END_SRC

  * So we can just do this instead:
    #+BEGIN_SRC python
      my_santa = Santa()
      Santa.give_gift(my_santa, 'boy', 'toy') # -> Good boy boy, here is your toy

      give_gift = lambda santa, boy, toy: santa.give_gift(santa, boy, toy)
    #+END_SRC

* Christmas break #3
   :PROPERTIES:
   :reveal_background: ./images/cat_boxing.gif
   :END:

* Function composition
** Partial application

#+ATTR_REVEAL: :frag (appear)
 * Haskell:
   #+BEGIN_SRC haskell
     my_sum:: Num a => -> a -> a -> a
     my_sum a b = a + b
     add_three = my_sum 3
     
     add_three 2 == 5
   #+END_SRC

 * Python:
   #+BEGIN_SRC python
     from toolz.functoolz import partial
   
     def my_sum(a, b):
         return a + b
   
     add_three = partial(my_sum, 3)
   #+END_SRC

** Currying
#+ATTR_REVEAL: :frag (appear)
   * Haskell:
     #+BEGIN_SRC haskell
       my_sum:: Num a => -> a -> a -> a
       my_sum a b = a + b

       -- my_sum 1 :: Num a => a -> a

       (my_sum 1) 2 == (my_sum 1 2) == 3
     #+END_SRC

   * Python:

    #+BEGIN_SRC python
      from toolz.functoolz import curry

      def my_sum(a, b):
          return a + b

      my_sum(1)(2) == my_sum(1, 2) == 3
    #+END_SRC

** Composition
#+ATTR_REVEAL: :frag (appear)
  * Haskell:

    #+BEGIN_SRC haskell
      import Data.Char (toUpper)
    
      get_first:: [a] -> a
      get_first lis = lis !! 0
    
      upper_first_letter:: [Char] -> Char
      upper_first_letter = toUpper . get_first
    
    #+END_SRC

  * Python:
    #+BEGIN_SRC python
       from toolz.functoolz import compose
       from toolz.curried import get

       upcase_first_letter_classic = lambda word: word[0].upper()
       # why is this better?
       upcase_first_letter = compose(
           get(0), # = lambda l: l[0]
           lambda c: c.upper(),
       )

       upcase_first_letter('hello') == upcase_first_letter_classic('hello') == 'H'
    #+END_SRC

** Pipes!

Who gets a gift for Christmas??

#+BEGIN_SRC 
    people = [
        {'name': 'Bob', 'age': 10, 'well_behaved': True},
        {'name': 'Rick', 'age': 10, 'well_behaved': False},
        {'name': 'John', 'age': 20, 'well_behaved': True},
    ]

#+END_SRC

*** Pipes to the rescue
#+ATTR_REVEAL: :frag (appear)

 * witout pipes:
   #+BEGIN_SRC python
     def get_gifts_classic(people):
         getting_gifts = []
         for person in people:
             if person['age'] < 18 and person['well_behaved']:
                 getting_gifts.append(person['name'])
   
         return getting_gifts
   
   #+END_SRC

 * with pipes
   #+BEGIN_SRC python
      def get_gifts(people):
          # ``pipe(data, f, g, h)`` is equivalent to ``h(g(f(data)))`
          return pipe(people,
              filter(lambda v: v['age'] < 18 and v['well_behaved']),
              mapcat(get(['name'])),
              list)
   #+END_SRC

* Recursion

** What is recursion anyway

[[./images/recursion.gif]]

** Factorial
#+ATTR_REVEAL: :frag (appear)
  * Recursive factorial function
    #+BEGIN_SRC python
      def fact(n):
          if n == 0: return 1
          return n * fact(n-1)

      fact(100)
      # -> RuntimeError: maximum recursion depth exceeded
    #+END_SRC

  * Recursion using tco and fn.py
    #+BEGIN_SRC python
      from fn import recur

      @recur.tco
      def fact(n, acc=1):
          if n == 0: return False, acc
          return True, (n-1, acc*n)
    #+END_SRC

* Immutability
** Dictionaries manipulations

#+ATTR_REVEAL: :frag (appear)

 * mutable
   #+BEGIN_SRC python
     def enrich_dict_mutable(dic):
         for key in dic:
             if key % 2 == 0:
                 dic[key] = 'bar'
   
         keys_below_zero = [x for x in dic if x < 0]
         for neg in keys_below_zero:
             del dic[neg]
   
         return dic
    #+END_SRC

 * immutable
   #+BEGIN_SRC python
     from toolz import dictoolz

     def enrich_dict_immutable(dic):
         is_positive = lambda v: v >= 0
         filtered = dicttoolz.keyfilter(is_positive, dic)
         return dicttoolz.itemmap(_even_bar, filtered)
   #+END_SRC

** Dictoolz

[[./images/dicttoolz.png]]

* Streaming
** To infinity and beyond

*** Infinite set of even numbers
#+ATTR_REVEAL: :frag (appear)
  * Haskell:
   
    #+BEGIN_SRC haskell
      [x | x <- [0..], x `mod` 2 == 0]
    #+END_SRC

  * Python:

    #+BEGIN_SRC python
      def evens():
          ev = 0
          while True:
              yield ev
              ev += 2
    
    
      gen_ev = evens()
      for n in range(10):
          print(next(gen_ev))
    #+END_SRC

  * Itertools/toolz:
    
     #+BEGIN_SRC python
       from itertools import count
       from toolz.itertoolz import take
     
       for ev in take(10, count(0, 2)):
           print(ev)
     #+END_SRC

* Types
** Mypy

 #+BEGIN_SRC python
   def typed_addition(a: int, b: int) -> int:
       return a + b
 #+END_SRC

* Side effects

** Pure computation?

[[./images/haskell.png]]

** Monads to the rescue

** Call me Maybe

[[./images/maybe.png]]

#+BEGIN_SRC haskell
  data Maybe a = Nothing | Just a
#+END_SRC

** Monads and Python

#+BEGIN_SRC python
  from pymonad.Maybe import *
  from pymonad.List import *

  # 'neg' knows nothing about functor types...
  def neg(x):
      return -x

  # ... but that doesn't stop us from using it anyway.
  neg * Just(9)                 # returns Just(-9)
  neg * Nothing                 # returns Nothing
  neg * List(1, 2, 3, 4)        # returns List(-1, -2, -3, -4)
#+END_SRC

* Testing

** Quickcheck

#+BEGIN_SRC haskell
  import Test.QuickCheck

  prop_revapp :: [Int] -> [Int] -> Bool
  prop_revapp xs ys = reverse (xs++ys) == reverse xs ++ reverse ys

  main = quickCheck prop_revapp
#+END_SRC

** Hypothesis

* Conclusion
#+ATTR_REVEAL: :frag (appear)
  * Think about your data
  * Go immutable first
  * Compose functions
  * Bottom up rather than top down
  * [[./images/happy_cat.jpg]]

* Resources

- [[http://www.cse.chalmers.se/~rjmh/Papers/whyfp.pdf][Why functional programming matters]]
- [[https://www.youtube.com/watch?v=-6BsiVyC1kM][the value of values]]
- [[https://www.youtube.com/watch?v=-6BsiVyC1kM][Clojure transducers]]
- [[http://learnyouahaskell.com/][Learn You a Haskell for Great Good]]
- [[https://github.com/pytoolz/toolz][toolz]]
- [[http://mypy-lang.org/][mypy lang]]
- [[http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html][functors, applicatives, and monads in pictures]]
- [[https://wiki.haskell.org/Tutorials/Programming_Haskell/String_IO][Haskell String IO]]
- [[https://github.com/tobgu/pyrsistent][pyrsistent, persistent data structures in Python]]
- [[http://coconut-lang.org/][Coconut lang]]
- [[https://github.com/kachayev/fn.py][fn.py library]]
- [[https://github.com/Suor/funcy][funcy Python library]]
- [[http://people.eecs.berkeley.edu/~gongliang13/lambda/][lambda calculus interpreter]]
- [[https://medium.com/@FunctionalWorks/the-rise-of-frontend-functional-languages-c073bd8ea8ed#.yualxlz77][rise of functional programming on the frontend]]
- [[https://www.wiki.ed.ac.uk/display/SAPMW/2015/02/23/The+Rise+Of+Functional+Programming+In+Industry][rise of functional programming in the industry]]
- [[https://code.facebook.com/posts/745068642270222/fighting-spam-with-haskell/][fighting spam with Haskell]]
- [[https://www.quora.com/Which-universities-teach-their-first-CS-course-in-a-functional-programming-language][universities using FP in the first courses]]
- [[http://haskell-servant.readthedocs.io/en/stable/introduction.html][Haskell Servant introduction]]

* Extra material

** Sample lambda calculus reduction
#+ATTR_REVEAL: :frag (appear)
  * Assuming these definitions:
  * True: $\lambda x.\lambda y. x$
  * False: $\lambda x.\lambda y. y$
  * And: $\lambda p. \lambda q. p q p$
  * Let's prove that *True And False == False*:
  * $(\lambda p. \lambda q. p q p) (\lambda x.\lambda y. x) (\lambda x.\lambda y. y)$
  * $\beta \rightarrow (\lambda q. (\lambda x. \lambda y. x) q (\lambda x. \lambda y. x)) (\lambda x.\lambda y. y)$
  * $\beta \rightarrow (\lambda x. \lambda y. x) (\lambda x.\lambda y. y) (\lambda x.\lambda y. x)$
  * $\beta \rightarrow (\lambda x. \lambda y. y)$
  * *BINGO*

** 
  :PROPERTIES:
  :reveal_background: ./images/lisp_cycles.png
  :reveal_background_size: 800px
  :END:

** Toolz

 Toolz provides a suite of functions which have the following functional virtues:

 *Composable*: They interoperate due to their use of core data structures.
 *Pure*: They don‚Äôt change their inputs or rely on external state.
 *Lazy*: They don‚Äôt run until absolutely necessary, allowing them to support large streaming data sets.

*** Toolz capabilities

  - *Dicttoolz*: immutable dictionaries functionality
  - *Functoolz*: extend functools
  - *Itertoolz*: extend itertools

** Quotes

*** 10 100

 #+BEGIN_QUOTE
 "It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures." ‚ÄîAlan Perlis
 #+END_QUOTE
   
*** Describing

 #+BEGIN_QUOTE
 Functional programming is like describing your problem to a mathematician.
 Imperative programming is like giving instructions to an idiot. - Arcus #scheme
 #+END_QUOTE

*** Functions


*** Python FP

 #+BEGIN_QUOTE
 using Python for Functional Programming it's like looking at a beautiful view through a dirty window - 

 #+END_QUOTE

