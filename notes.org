#+AUTHOR: Andrea Crotti
#+TITLE: Functional Programming
#+OPTIONS: num:nil ^:nil
#+REVEAL_TRANS: fade
#+REVEAL_SPEED: fast
#+EMAIL: andrea.crotti.0@gmail.com


* What?
  
  - Full model of computation (Alonzo Church)
  - /functions/ are *first class* citizens
    - higher-order functions
    - partial application
    - currying
  - Functions are pure
    - immutable data: *no state*

* Languages

  - Haskell
  - Clojure
  - Scala
  - F#
  - Erlang
  - Elixir
  - Elm

* No loops
  
  - looping with style

* Why?
   
  - concurrency (multicore)
  - threading sucks
  - it's the next big paradigm shift (and it's already happening)

* Code


#+begin_src python
  def foo(x):
    if x>0:
      return x+1
    else:
      return x-1

  foo(1)
#+end_src

#+RESULTS:
: 2

* Lambda calculus
   
  - full *model* of computation
  - currying
  - higher order function
  - map/reduce/whatever
  - Church numerals introduction

* Side effects and immutability

  - what is a side effect
  - why is it bad
  - how to encapsulate them properly
  - demo about refactoring using 

* Design principles

  - OOP issues
  - designing without classes
  - composition over inheritance
  - parallel with all the states in the universe and how to test with that

* Python and FP issues
   
  - (almost) everything is mutable
  - no tail call optimization

  - what is a function in Python
  - decorators short intro
  - methods/classmethods/functions and behaviour

* Toolz
   
  - Show some nice examples such as:
    toolz.itemmap(reversed, dic)

* Generators and higher order functions

  - infinite streams
  - relationship between streams and pure functions

* Testing

  - testing pure functions
  - show the refactor example from the crappy solution to testing with hypothesis

* Resources

  - Okasaki for persistent data structures
  - All Rich Hickey talks

* Quotes
  - "It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures." â€”Alan Perlis
